{"ast":null,"code":"import * as actionCreators from '../actions/actionCreators.js';\nexport const loginHandler = ({\n  credentials,\n  firebase\n}) => (dispatch, getState) => {\n  firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(() => {\n    console.log(\"LOGIN_SUCCESS\");\n    dispatch({\n      type: 'LOGIN_SUCCESS'\n    });\n  }).catch(err => {\n    dispatch({\n      type: 'LOGIN_ERROR',\n      err\n    });\n  });\n};\nexport const logoutHandler = firebase => (dispatch, getState) => {\n  firebase.auth().signOut().then(() => {\n    dispatch(actionCreators.logoutSuccess);\n  });\n};\nexport const registerHandler = (newUser, firebase) => (dispatch, getState, {\n  getFirestore\n}) => {\n  const firestore = getFirestore();\n  firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(resp => firestore.collection('users').doc(resp.user.uid).set({\n    firstName: newUser.firstName,\n    lastName: newUser.lastName,\n    initials: \"\".concat(newUser.firstName[0]).concat(newUser.lastName[0])\n  })).then(() => {\n    dispatch(actionCreators.registerSuccess);\n  }).catch(err => {\n    dispatch(actionCreators.registerError);\n  });\n};","map":{"version":3,"sources":["/Users/david/Documents/School/StonyBrook/CSE 316/todo_hw3/src/store/database/asynchHandler.js"],"names":["actionCreators","loginHandler","credentials","firebase","dispatch","getState","auth","signInWithEmailAndPassword","email","password","then","console","log","type","catch","err","logoutHandler","signOut","logoutSuccess","registerHandler","newUser","getFirestore","firestore","createUserWithEmailAndPassword","resp","collection","doc","user","uid","set","firstName","lastName","initials","registerSuccess","registerError"],"mappings":"AAAA,OAAO,KAAKA,cAAZ,MAAgC,8BAAhC;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA+B,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/EF,EAAAA,QAAQ,CAACG,IAAT,GAAgBC,0BAAhB,CACEL,WAAW,CAACM,KADd,EAEEN,WAAW,CAACO,QAFd,EAGEC,IAHF,CAGO,MAAM;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAR,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAND,EAMGC,KANH,CAMUC,GAAD,IAAS;AAChBX,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAE,aAAR;AAAuBE,MAAAA;AAAvB,KAAD,CAAR;AACD,GARD;AASD,CAVI;AAYP,OAAO,MAAMC,aAAa,GAAIb,QAAD,IAAc,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/DF,EAAAA,QAAQ,CAACG,IAAT,GAAgBW,OAAhB,GAA0BP,IAA1B,CAA+B,MAAM;AACjCN,IAAAA,QAAQ,CAACJ,cAAc,CAACkB,aAAhB,CAAR;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUjB,QAAV,KAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEgB,EAAAA;AAAF,CAArB,KAA0C;AAC5F,QAAMC,SAAS,GAAGD,YAAY,EAA9B;AACAlB,EAAAA,QAAQ,CAACG,IAAT,GAAgBiB,8BAAhB,CACIH,OAAO,CAACZ,KADZ,EAEIY,OAAO,CAACX,QAFZ,EAGEC,IAHF,CAGOc,IAAI,IAAIF,SAAS,CAACG,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCF,IAAI,CAACG,IAAL,CAAUC,GAA5C,EAAiDC,GAAjD,CAAqD;AAChEC,IAAAA,SAAS,EAAEV,OAAO,CAACU,SAD6C;AAEhEC,IAAAA,QAAQ,EAAEX,OAAO,CAACW,QAF8C;AAGhEC,IAAAA,QAAQ,YAAKZ,OAAO,CAACU,SAAR,CAAkB,CAAlB,CAAL,SAA4BV,OAAO,CAACW,QAAR,CAAiB,CAAjB,CAA5B;AAHwD,GAArD,CAHf,EAOIrB,IAPJ,CAOS,MAAM;AACXN,IAAAA,QAAQ,CAACJ,cAAc,CAACiC,eAAhB,CAAR;AACH,GATD,EASGnB,KATH,CASUC,GAAD,IAAS;AACdX,IAAAA,QAAQ,CAACJ,cAAc,CAACkC,aAAhB,CAAR;AACH,GAXD;AAYH,CAdM","sourcesContent":["import * as actionCreators from '../actions/actionCreators.js'\n\nexport const loginHandler = ({ credentials, firebase }) => (dispatch, getState) => {\n    firebase.auth().signInWithEmailAndPassword(\n      credentials.email,\n      credentials.password,\n    ).then(() => {\n      console.log(\"LOGIN_SUCCESS\");\n      dispatch({ type: 'LOGIN_SUCCESS' });\n    }).catch((err) => {\n      dispatch({ type: 'LOGIN_ERROR', err });\n    });\n  };\n\nexport const logoutHandler = (firebase) => (dispatch, getState) => {\n    firebase.auth().signOut().then(() => {\n        dispatch(actionCreators.logoutSuccess);\n    });\n};\n\nexport const registerHandler = (newUser, firebase) => (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(\n        newUser.email,\n        newUser.password,\n    ).then(resp => firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: `${newUser.firstName[0]}${newUser.lastName[0]}`,\n    })).then(() => {\n        dispatch(actionCreators.registerSuccess);\n    }).catch((err) => {\n        dispatch(actionCreators.registerError);\n    });\n};"]},"metadata":{},"sourceType":"module"}